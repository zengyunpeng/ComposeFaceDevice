package com.intellif.dblib.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.intellif.dblib.bean.DBCallRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBCALL_RECORD".
*/
public class DBCallRecordDao extends AbstractDao<DBCallRecord, Long> {

    public static final String TABLENAME = "DBCALL_RECORD";

    /**
     * Properties of entity DBCallRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CallNo = new Property(1, String.class, "callNo", false, "CALL_NO");
        public final static Property CallImagePath = new Property(2, String.class, "callImagePath", false, "CALL_IMAGE_PATH");
        public final static Property HungUpImagePath = new Property(3, String.class, "hungUpImagePath", false, "HUNG_UP_IMAGE_PATH");
        public final static Property AnswerType = new Property(4, int.class, "answerType", false, "ANSWER_TYPE");
        public final static Property CallState = new Property(5, int.class, "callState", false, "CALL_STATE");
        public final static Property AnswerTime = new Property(6, long.class, "answerTime", false, "ANSWER_TIME");
        public final static Property EndTime = new Property(7, long.class, "endTime", false, "END_TIME");
        public final static Property OpenTime = new Property(8, long.class, "openTime", false, "OPEN_TIME");
        public final static Property HasUpload = new Property(9, boolean.class, "hasUpload", false, "HAS_UPLOAD");
        public final static Property UploadFrequency = new Property(10, int.class, "uploadFrequency", false, "UPLOAD_FREQUENCY");
    }


    public DBCallRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DBCallRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBCALL_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CALL_NO\" TEXT," + // 1: callNo
                "\"CALL_IMAGE_PATH\" TEXT," + // 2: callImagePath
                "\"HUNG_UP_IMAGE_PATH\" TEXT," + // 3: hungUpImagePath
                "\"ANSWER_TYPE\" INTEGER NOT NULL ," + // 4: answerType
                "\"CALL_STATE\" INTEGER NOT NULL ," + // 5: callState
                "\"ANSWER_TIME\" INTEGER NOT NULL ," + // 6: answerTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 7: endTime
                "\"OPEN_TIME\" INTEGER NOT NULL ," + // 8: openTime
                "\"HAS_UPLOAD\" INTEGER NOT NULL ," + // 9: hasUpload
                "\"UPLOAD_FREQUENCY\" INTEGER NOT NULL );"); // 10: uploadFrequency
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBCALL_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBCallRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String callNo = entity.getCallNo();
        if (callNo != null) {
            stmt.bindString(2, callNo);
        }
 
        String callImagePath = entity.getCallImagePath();
        if (callImagePath != null) {
            stmt.bindString(3, callImagePath);
        }
 
        String hungUpImagePath = entity.getHungUpImagePath();
        if (hungUpImagePath != null) {
            stmt.bindString(4, hungUpImagePath);
        }
        stmt.bindLong(5, entity.getAnswerType());
        stmt.bindLong(6, entity.getCallState());
        stmt.bindLong(7, entity.getAnswerTime());
        stmt.bindLong(8, entity.getEndTime());
        stmt.bindLong(9, entity.getOpenTime());
        stmt.bindLong(10, entity.getHasUpload() ? 1L: 0L);
        stmt.bindLong(11, entity.getUploadFrequency());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBCallRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String callNo = entity.getCallNo();
        if (callNo != null) {
            stmt.bindString(2, callNo);
        }
 
        String callImagePath = entity.getCallImagePath();
        if (callImagePath != null) {
            stmt.bindString(3, callImagePath);
        }
 
        String hungUpImagePath = entity.getHungUpImagePath();
        if (hungUpImagePath != null) {
            stmt.bindString(4, hungUpImagePath);
        }
        stmt.bindLong(5, entity.getAnswerType());
        stmt.bindLong(6, entity.getCallState());
        stmt.bindLong(7, entity.getAnswerTime());
        stmt.bindLong(8, entity.getEndTime());
        stmt.bindLong(9, entity.getOpenTime());
        stmt.bindLong(10, entity.getHasUpload() ? 1L: 0L);
        stmt.bindLong(11, entity.getUploadFrequency());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBCallRecord readEntity(Cursor cursor, int offset) {
        DBCallRecord entity = new DBCallRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // callNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // callImagePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hungUpImagePath
            cursor.getInt(offset + 4), // answerType
            cursor.getInt(offset + 5), // callState
            cursor.getLong(offset + 6), // answerTime
            cursor.getLong(offset + 7), // endTime
            cursor.getLong(offset + 8), // openTime
            cursor.getShort(offset + 9) != 0, // hasUpload
            cursor.getInt(offset + 10) // uploadFrequency
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBCallRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCallNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCallImagePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHungUpImagePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAnswerType(cursor.getInt(offset + 4));
        entity.setCallState(cursor.getInt(offset + 5));
        entity.setAnswerTime(cursor.getLong(offset + 6));
        entity.setEndTime(cursor.getLong(offset + 7));
        entity.setOpenTime(cursor.getLong(offset + 8));
        entity.setHasUpload(cursor.getShort(offset + 9) != 0);
        entity.setUploadFrequency(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBCallRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBCallRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBCallRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
