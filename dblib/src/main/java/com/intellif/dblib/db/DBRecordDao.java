package com.intellif.dblib.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.intellif.dblib.bean.DBRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBRECORD".
*/
public class DBRecordDao extends AbstractDao<DBRecord, Long> {

    public static final String TABLENAME = "DBRECORD";

    /**
     * Properties of entity DBRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonId = new Property(1, String.class, "personId", false, "PERSON_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property RecogizeTime = new Property(3, long.class, "recogizeTime", false, "RECOGIZE_TIME");
        public final static Property Temp = new Property(4, float.class, "temp", false, "TEMP");
        public final static Property ImagePath = new Property(5, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property DbImagePath = new Property(6, String.class, "dbImagePath", false, "DB_IMAGE_PATH");
        public final static Property FaceId = new Property(7, int.class, "faceId", false, "FACE_ID");
        public final static Property TempStatus = new Property(8, int.class, "tempStatus", false, "TEMP_STATUS");
        public final static Property CustomnerId = new Property(9, String.class, "customnerId", false, "CUSTOMNER_ID");
        public final static Property IsRecongize = new Property(10, boolean.class, "isRecongize", false, "IS_RECONGIZE");
        public final static Property IsUpload = new Property(11, boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property IsUploadPCTool = new Property(12, boolean.class, "isUploadPCTool", false, "IS_UPLOAD_PCTOOL");
        public final static Property PersonType = new Property(13, int.class, "personType", false, "PERSON_TYPE");
        public final static Property PassType = new Property(14, int.class, "passType", false, "PASS_TYPE");
        public final static Property FaceRecPath = new Property(15, String.class, "faceRecPath", false, "FACE_REC_PATH");
        public final static Property UploadFrequency = new Property(16, int.class, "uploadFrequency", false, "UPLOAD_FREQUENCY");
        public final static Property UploadPCToolsFrequency = new Property(17, int.class, "uploadPCToolsFrequency", false, "UPLOAD_PCTOOLS_FREQUENCY");
        public final static Property IdCardInfoStr = new Property(18, String.class, "idCardInfoStr", false, "ID_CARD_INFO_STR");
    }


    public DBRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DBRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBRECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PERSON_ID\" TEXT," + // 1: personId
                "\"NAME\" TEXT," + // 2: name
                "\"RECOGIZE_TIME\" INTEGER NOT NULL ," + // 3: recogizeTime
                "\"TEMP\" REAL NOT NULL ," + // 4: temp
                "\"IMAGE_PATH\" TEXT," + // 5: imagePath
                "\"DB_IMAGE_PATH\" TEXT," + // 6: dbImagePath
                "\"FACE_ID\" INTEGER NOT NULL ," + // 7: faceId
                "\"TEMP_STATUS\" INTEGER NOT NULL ," + // 8: tempStatus
                "\"CUSTOMNER_ID\" TEXT," + // 9: customnerId
                "\"IS_RECONGIZE\" INTEGER NOT NULL ," + // 10: isRecongize
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 11: isUpload
                "\"IS_UPLOAD_PCTOOL\" INTEGER NOT NULL ," + // 12: isUploadPCTool
                "\"PERSON_TYPE\" INTEGER NOT NULL ," + // 13: personType
                "\"PASS_TYPE\" INTEGER NOT NULL ," + // 14: passType
                "\"FACE_REC_PATH\" TEXT," + // 15: faceRecPath
                "\"UPLOAD_FREQUENCY\" INTEGER NOT NULL ," + // 16: uploadFrequency
                "\"UPLOAD_PCTOOLS_FREQUENCY\" INTEGER NOT NULL ," + // 17: uploadPCToolsFrequency
                "\"ID_CARD_INFO_STR\" TEXT);"); // 18: idCardInfoStr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBRECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(2, personId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getRecogizeTime());
        stmt.bindDouble(5, entity.getTemp());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(6, imagePath);
        }
 
        String dbImagePath = entity.getDbImagePath();
        if (dbImagePath != null) {
            stmt.bindString(7, dbImagePath);
        }
        stmt.bindLong(8, entity.getFaceId());
        stmt.bindLong(9, entity.getTempStatus());
 
        String customnerId = entity.getCustomnerId();
        if (customnerId != null) {
            stmt.bindString(10, customnerId);
        }
        stmt.bindLong(11, entity.getIsRecongize() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsUpload() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsUploadPCTool() ? 1L: 0L);
        stmt.bindLong(14, entity.getPersonType());
        stmt.bindLong(15, entity.getPassType());
 
        String faceRecPath = entity.getFaceRecPath();
        if (faceRecPath != null) {
            stmt.bindString(16, faceRecPath);
        }
        stmt.bindLong(17, entity.getUploadFrequency());
        stmt.bindLong(18, entity.getUploadPCToolsFrequency());
 
        String idCardInfoStr = entity.getIdCardInfoStr();
        if (idCardInfoStr != null) {
            stmt.bindString(19, idCardInfoStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(2, personId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getRecogizeTime());
        stmt.bindDouble(5, entity.getTemp());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(6, imagePath);
        }
 
        String dbImagePath = entity.getDbImagePath();
        if (dbImagePath != null) {
            stmt.bindString(7, dbImagePath);
        }
        stmt.bindLong(8, entity.getFaceId());
        stmt.bindLong(9, entity.getTempStatus());
 
        String customnerId = entity.getCustomnerId();
        if (customnerId != null) {
            stmt.bindString(10, customnerId);
        }
        stmt.bindLong(11, entity.getIsRecongize() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsUpload() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsUploadPCTool() ? 1L: 0L);
        stmt.bindLong(14, entity.getPersonType());
        stmt.bindLong(15, entity.getPassType());
 
        String faceRecPath = entity.getFaceRecPath();
        if (faceRecPath != null) {
            stmt.bindString(16, faceRecPath);
        }
        stmt.bindLong(17, entity.getUploadFrequency());
        stmt.bindLong(18, entity.getUploadPCToolsFrequency());
 
        String idCardInfoStr = entity.getIdCardInfoStr();
        if (idCardInfoStr != null) {
            stmt.bindString(19, idCardInfoStr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBRecord readEntity(Cursor cursor, int offset) {
        DBRecord entity = new DBRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getLong(offset + 3), // recogizeTime
            cursor.getFloat(offset + 4), // temp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imagePath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dbImagePath
            cursor.getInt(offset + 7), // faceId
            cursor.getInt(offset + 8), // tempStatus
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // customnerId
            cursor.getShort(offset + 10) != 0, // isRecongize
            cursor.getShort(offset + 11) != 0, // isUpload
            cursor.getShort(offset + 12) != 0, // isUploadPCTool
            cursor.getInt(offset + 13), // personType
            cursor.getInt(offset + 14), // passType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // faceRecPath
            cursor.getInt(offset + 16), // uploadFrequency
            cursor.getInt(offset + 17), // uploadPCToolsFrequency
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // idCardInfoStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecogizeTime(cursor.getLong(offset + 3));
        entity.setTemp(cursor.getFloat(offset + 4));
        entity.setImagePath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDbImagePath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFaceId(cursor.getInt(offset + 7));
        entity.setTempStatus(cursor.getInt(offset + 8));
        entity.setCustomnerId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsRecongize(cursor.getShort(offset + 10) != 0);
        entity.setIsUpload(cursor.getShort(offset + 11) != 0);
        entity.setIsUploadPCTool(cursor.getShort(offset + 12) != 0);
        entity.setPersonType(cursor.getInt(offset + 13));
        entity.setPassType(cursor.getInt(offset + 14));
        entity.setFaceRecPath(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUploadFrequency(cursor.getInt(offset + 16));
        entity.setUploadPCToolsFrequency(cursor.getInt(offset + 17));
        entity.setIdCardInfoStr(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
