package com.intellif.dblib.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.intellif.dblib.bean.DBPerson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBPERSON".
*/
public class DBPersonDao extends AbstractDao<DBPerson, Long> {

    public static final String TABLENAME = "DBPERSON";

    /**
     * Properties of entity DBPerson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FaceId = new Property(1, int.class, "faceId", false, "FACE_ID");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property BornDate = new Property(3, String.class, "bornDate", false, "BORN_DATE");
        public final static Property Gender = new Property(4, int.class, "gender", false, "GENDER");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Nation = new Property(6, String.class, "nation", false, "NATION");
        public final static Property TelNo = new Property(7, String.class, "telNo", false, "TEL_NO");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property CustomerId = new Property(9, String.class, "customerId", false, "CUSTOMER_ID");
        public final static Property AccessRule = new Property(10, String.class, "accessRule", false, "ACCESS_RULE");
        public final static Property PersonType = new Property(11, int.class, "personType", false, "PERSON_TYPE");
        public final static Property Push = new Property(12, String.class, "push", false, "PUSH");
        public final static Property Work_number = new Property(13, String.class, "work_number", false, "WORK_NUMBER");
        public final static Property Department = new Property(14, String.class, "department", false, "DEPARTMENT");
        public final static Property IcCardNo = new Property(15, String.class, "icCardNo", false, "IC_CARD_NO");
        public final static Property Qr_code = new Property(16, String.class, "qr_code", false, "QR_CODE");
        public final static Property Office_date = new Property(17, String.class, "office_date", false, "OFFICE_DATE");
        public final static Property IdCardNo = new Property(18, String.class, "idCardNo", false, "ID_CARD_NO");
        public final static Property Mailbox = new Property(19, String.class, "mailbox", false, "MAILBOX");
        public final static Property Position = new Property(20, String.class, "position", false, "POSITION");
        public final static Property StaffGroup = new Property(21, String.class, "staffGroup", false, "STAFF_GROUP");
        public final static Property Hint = new Property(22, String.class, "hint", false, "HINT");
        public final static Property Remarks = new Property(23, String.class, "remarks", false, "REMARKS");
        public final static Property ImgUrl = new Property(24, String.class, "imgUrl", false, "IMG_URL");
        public final static Property SimpleImageUrl = new Property(25, String.class, "simpleImageUrl", false, "SIMPLE_IMAGE_URL");
        public final static Property Feature = new Property(26, byte[].class, "feature", false, "FEATURE");
        public final static Property StorageTime = new Property(27, long.class, "storageTime", false, "STORAGE_TIME");
        public final static Property Reserved_1 = new Property(28, String.class, "reserved_1", false, "RESERVED_1");
        public final static Property Reserved_2 = new Property(29, String.class, "reserved_2", false, "RESERVED_2");
        public final static Property Reserved_3 = new Property(30, String.class, "reserved_3", false, "RESERVED_3");
        public final static Property Reserved_4 = new Property(31, String.class, "reserved_4", false, "RESERVED_4");
        public final static Property Reserved_5 = new Property(32, String.class, "reserved_5", false, "RESERVED_5");
        public final static Property Reserved_6 = new Property(33, String.class, "reserved_6", false, "RESERVED_6");
    }


    public DBPersonDao(DaoConfig config) {
        super(config);
    }
    
    public DBPersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBPERSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FACE_ID\" INTEGER NOT NULL ," + // 1: faceId
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"BORN_DATE\" TEXT," + // 3: bornDate
                "\"GENDER\" INTEGER NOT NULL ," + // 4: gender
                "\"NAME\" TEXT," + // 5: name
                "\"NATION\" TEXT," + // 6: nation
                "\"TEL_NO\" TEXT," + // 7: telNo
                "\"ADDRESS\" TEXT," + // 8: address
                "\"CUSTOMER_ID\" TEXT," + // 9: customerId
                "\"ACCESS_RULE\" TEXT," + // 10: accessRule
                "\"PERSON_TYPE\" INTEGER NOT NULL ," + // 11: personType
                "\"PUSH\" TEXT," + // 12: push
                "\"WORK_NUMBER\" TEXT," + // 13: work_number
                "\"DEPARTMENT\" TEXT," + // 14: department
                "\"IC_CARD_NO\" TEXT," + // 15: icCardNo
                "\"QR_CODE\" TEXT," + // 16: qr_code
                "\"OFFICE_DATE\" TEXT," + // 17: office_date
                "\"ID_CARD_NO\" TEXT," + // 18: idCardNo
                "\"MAILBOX\" TEXT," + // 19: mailbox
                "\"POSITION\" TEXT," + // 20: position
                "\"STAFF_GROUP\" TEXT," + // 21: staffGroup
                "\"HINT\" TEXT," + // 22: hint
                "\"REMARKS\" TEXT," + // 23: remarks
                "\"IMG_URL\" TEXT," + // 24: imgUrl
                "\"SIMPLE_IMAGE_URL\" TEXT," + // 25: simpleImageUrl
                "\"FEATURE\" BLOB," + // 26: feature
                "\"STORAGE_TIME\" INTEGER NOT NULL ," + // 27: storageTime
                "\"RESERVED_1\" TEXT," + // 28: reserved_1
                "\"RESERVED_2\" TEXT," + // 29: reserved_2
                "\"RESERVED_3\" TEXT," + // 30: reserved_3
                "\"RESERVED_4\" TEXT," + // 31: reserved_4
                "\"RESERVED_5\" TEXT," + // 32: reserved_5
                "\"RESERVED_6\" TEXT);"); // 33: reserved_6
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBPERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBPerson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFaceId());
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String bornDate = entity.getBornDate();
        if (bornDate != null) {
            stmt.bindString(4, bornDate);
        }
        stmt.bindLong(5, entity.getGender());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(7, nation);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(8, telNo);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindString(10, customerId);
        }
 
        String accessRule = entity.getAccessRule();
        if (accessRule != null) {
            stmt.bindString(11, accessRule);
        }
        stmt.bindLong(12, entity.getPersonType());
 
        String push = entity.getPush();
        if (push != null) {
            stmt.bindString(13, push);
        }
 
        String work_number = entity.getWork_number();
        if (work_number != null) {
            stmt.bindString(14, work_number);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(15, department);
        }
 
        String icCardNo = entity.getIcCardNo();
        if (icCardNo != null) {
            stmt.bindString(16, icCardNo);
        }
 
        String qr_code = entity.getQr_code();
        if (qr_code != null) {
            stmt.bindString(17, qr_code);
        }
 
        String office_date = entity.getOffice_date();
        if (office_date != null) {
            stmt.bindString(18, office_date);
        }
 
        String idCardNo = entity.getIdCardNo();
        if (idCardNo != null) {
            stmt.bindString(19, idCardNo);
        }
 
        String mailbox = entity.getMailbox();
        if (mailbox != null) {
            stmt.bindString(20, mailbox);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(21, position);
        }
 
        String staffGroup = entity.getStaffGroup();
        if (staffGroup != null) {
            stmt.bindString(22, staffGroup);
        }
 
        String hint = entity.getHint();
        if (hint != null) {
            stmt.bindString(23, hint);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(24, remarks);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(25, imgUrl);
        }
 
        String simpleImageUrl = entity.getSimpleImageUrl();
        if (simpleImageUrl != null) {
            stmt.bindString(26, simpleImageUrl);
        }
 
        byte[] feature = entity.getFeature();
        if (feature != null) {
            stmt.bindBlob(27, feature);
        }
        stmt.bindLong(28, entity.getStorageTime());
 
        String reserved_1 = entity.getReserved_1();
        if (reserved_1 != null) {
            stmt.bindString(29, reserved_1);
        }
 
        String reserved_2 = entity.getReserved_2();
        if (reserved_2 != null) {
            stmt.bindString(30, reserved_2);
        }
 
        String reserved_3 = entity.getReserved_3();
        if (reserved_3 != null) {
            stmt.bindString(31, reserved_3);
        }
 
        String reserved_4 = entity.getReserved_4();
        if (reserved_4 != null) {
            stmt.bindString(32, reserved_4);
        }
 
        String reserved_5 = entity.getReserved_5();
        if (reserved_5 != null) {
            stmt.bindString(33, reserved_5);
        }
 
        String reserved_6 = entity.getReserved_6();
        if (reserved_6 != null) {
            stmt.bindString(34, reserved_6);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBPerson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFaceId());
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String bornDate = entity.getBornDate();
        if (bornDate != null) {
            stmt.bindString(4, bornDate);
        }
        stmt.bindLong(5, entity.getGender());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(7, nation);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(8, telNo);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindString(10, customerId);
        }
 
        String accessRule = entity.getAccessRule();
        if (accessRule != null) {
            stmt.bindString(11, accessRule);
        }
        stmt.bindLong(12, entity.getPersonType());
 
        String push = entity.getPush();
        if (push != null) {
            stmt.bindString(13, push);
        }
 
        String work_number = entity.getWork_number();
        if (work_number != null) {
            stmt.bindString(14, work_number);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(15, department);
        }
 
        String icCardNo = entity.getIcCardNo();
        if (icCardNo != null) {
            stmt.bindString(16, icCardNo);
        }
 
        String qr_code = entity.getQr_code();
        if (qr_code != null) {
            stmt.bindString(17, qr_code);
        }
 
        String office_date = entity.getOffice_date();
        if (office_date != null) {
            stmt.bindString(18, office_date);
        }
 
        String idCardNo = entity.getIdCardNo();
        if (idCardNo != null) {
            stmt.bindString(19, idCardNo);
        }
 
        String mailbox = entity.getMailbox();
        if (mailbox != null) {
            stmt.bindString(20, mailbox);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(21, position);
        }
 
        String staffGroup = entity.getStaffGroup();
        if (staffGroup != null) {
            stmt.bindString(22, staffGroup);
        }
 
        String hint = entity.getHint();
        if (hint != null) {
            stmt.bindString(23, hint);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(24, remarks);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(25, imgUrl);
        }
 
        String simpleImageUrl = entity.getSimpleImageUrl();
        if (simpleImageUrl != null) {
            stmt.bindString(26, simpleImageUrl);
        }
 
        byte[] feature = entity.getFeature();
        if (feature != null) {
            stmt.bindBlob(27, feature);
        }
        stmt.bindLong(28, entity.getStorageTime());
 
        String reserved_1 = entity.getReserved_1();
        if (reserved_1 != null) {
            stmt.bindString(29, reserved_1);
        }
 
        String reserved_2 = entity.getReserved_2();
        if (reserved_2 != null) {
            stmt.bindString(30, reserved_2);
        }
 
        String reserved_3 = entity.getReserved_3();
        if (reserved_3 != null) {
            stmt.bindString(31, reserved_3);
        }
 
        String reserved_4 = entity.getReserved_4();
        if (reserved_4 != null) {
            stmt.bindString(32, reserved_4);
        }
 
        String reserved_5 = entity.getReserved_5();
        if (reserved_5 != null) {
            stmt.bindString(33, reserved_5);
        }
 
        String reserved_6 = entity.getReserved_6();
        if (reserved_6 != null) {
            stmt.bindString(34, reserved_6);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBPerson readEntity(Cursor cursor, int offset) {
        DBPerson entity = new DBPerson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // faceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bornDate
            cursor.getInt(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // telNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // customerId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // accessRule
            cursor.getInt(offset + 11), // personType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // push
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // work_number
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // department
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // icCardNo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // qr_code
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // office_date
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // idCardNo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // mailbox
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // position
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // staffGroup
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // hint
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // remarks
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // imgUrl
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // simpleImageUrl
            cursor.isNull(offset + 26) ? null : cursor.getBlob(offset + 26), // feature
            cursor.getLong(offset + 27), // storageTime
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // reserved_1
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // reserved_2
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // reserved_3
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // reserved_4
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // reserved_5
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33) // reserved_6
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBPerson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFaceId(cursor.getInt(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBornDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTelNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCustomerId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAccessRule(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPersonType(cursor.getInt(offset + 11));
        entity.setPush(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWork_number(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDepartment(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIcCardNo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setQr_code(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOffice_date(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIdCardNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMailbox(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPosition(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStaffGroup(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setHint(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRemarks(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setImgUrl(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setSimpleImageUrl(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setFeature(cursor.isNull(offset + 26) ? null : cursor.getBlob(offset + 26));
        entity.setStorageTime(cursor.getLong(offset + 27));
        entity.setReserved_1(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setReserved_2(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setReserved_3(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setReserved_4(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setReserved_5(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setReserved_6(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBPerson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBPerson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBPerson entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
