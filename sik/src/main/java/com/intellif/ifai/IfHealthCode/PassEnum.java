// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IfHealthCode.proto

package com.intellif.ifai.IfHealthCode;

/**
 * Protobuf enum {@code Ifaipb.PassEnum}
 */
public enum PassEnum
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   *身份证
   * </pre>
   *
   * <code>IDENTITY = 0;</code>
   */
  IDENTITY(0),
  /**
   * <pre>
   *健康码
   * </pre>
   *
   * <code>HEALTH_CODE = 1;</code>
   */
  HEALTH_CODE(1),
  /**
   * <pre>
   *人脸比对
   * </pre>
   *
   * <code>FACE = 2;</code>
   */
  FACE(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   *身份证
   * </pre>
   *
   * <code>IDENTITY = 0;</code>
   */
  public static final int IDENTITY_VALUE = 0;
  /**
   * <pre>
   *健康码
   * </pre>
   *
   * <code>HEALTH_CODE = 1;</code>
   */
  public static final int HEALTH_CODE_VALUE = 1;
  /**
   * <pre>
   *人脸比对
   * </pre>
   *
   * <code>FACE = 2;</code>
   */
  public static final int FACE_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static PassEnum valueOf(int value) {
    return forNumber(value);
  }

  public static PassEnum forNumber(int value) {
    switch (value) {
      case 0: return IDENTITY;
      case 1: return HEALTH_CODE;
      case 2: return FACE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PassEnum>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      PassEnum> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PassEnum>() {
          public PassEnum findValueByNumber(int number) {
            return PassEnum.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.intellif.ifai.IfHealthCode.Ifai.getDescriptor().getEnumTypes().get(0);
  }

  private static final PassEnum[] VALUES = values();

  public static PassEnum valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private PassEnum(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:Ifaipb.PassEnum)
}

