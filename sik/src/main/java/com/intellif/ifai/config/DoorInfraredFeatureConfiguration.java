// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IfDoorControlConfiguration.proto

package com.intellif.ifai.config;

/**
 * <pre>
 * </pre>
 *
 * Protobuf type {@code Ifaipb.DoorInfraredFeatureConfiguration}
 */
public  final class DoorInfraredFeatureConfiguration extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:Ifaipb.DoorInfraredFeatureConfiguration)
    DoorInfraredFeatureConfigurationOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DoorInfraredFeatureConfiguration.newBuilder() to construct.
  private DoorInfraredFeatureConfiguration(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DoorInfraredFeatureConfiguration() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private DoorInfraredFeatureConfiguration(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.intellif.ifai.common.CommonBool.Builder subBuilder = null;
            if (infraredTemperatureSwitch_ != null) {
              subBuilder = infraredTemperatureSwitch_.toBuilder();
            }
            infraredTemperatureSwitch_ = input.readMessage(com.intellif.ifai.common.CommonBool.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(infraredTemperatureSwitch_);
              infraredTemperatureSwitch_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.intellif.ifai.common.CommonFloat.Builder subBuilder = null;
            if (infraredTemperatureMinimum_ != null) {
              subBuilder = infraredTemperatureMinimum_.toBuilder();
            }
            infraredTemperatureMinimum_ = input.readMessage(com.intellif.ifai.common.CommonFloat.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(infraredTemperatureMinimum_);
              infraredTemperatureMinimum_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.intellif.ifai.common.CommonFloat.Builder subBuilder = null;
            if (infraredTemperatureMaximum_ != null) {
              subBuilder = infraredTemperatureMaximum_.toBuilder();
            }
            infraredTemperatureMaximum_ = input.readMessage(com.intellif.ifai.common.CommonFloat.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(infraredTemperatureMaximum_);
              infraredTemperatureMaximum_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            com.intellif.ifai.common.CommonFloat.Builder subBuilder = null;
            if (infraredTemperatureAdjust_ != null) {
              subBuilder = infraredTemperatureAdjust_.toBuilder();
            }
            infraredTemperatureAdjust_ = input.readMessage(com.intellif.ifai.common.CommonFloat.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(infraredTemperatureAdjust_);
              infraredTemperatureAdjust_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.intellif.ifai.config.Ifai.internal_static_Ifaipb_DoorInfraredFeatureConfiguration_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.intellif.ifai.config.Ifai.internal_static_Ifaipb_DoorInfraredFeatureConfiguration_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.intellif.ifai.config.DoorInfraredFeatureConfiguration.class, com.intellif.ifai.config.DoorInfraredFeatureConfiguration.Builder.class);
  }

  public static final int INFRARED_TEMPERATURE_SWITCH_FIELD_NUMBER = 1;
  private com.intellif.ifai.common.CommonBool infraredTemperatureSwitch_;
  /**
   * <pre>
   * 红外温度报警开关
   * </pre>
   *
   * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
   */
  public boolean hasInfraredTemperatureSwitch() {
    return infraredTemperatureSwitch_ != null;
  }
  /**
   * <pre>
   * 红外温度报警开关
   * </pre>
   *
   * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
   */
  public com.intellif.ifai.common.CommonBool getInfraredTemperatureSwitch() {
    return infraredTemperatureSwitch_ == null ? com.intellif.ifai.common.CommonBool.getDefaultInstance() : infraredTemperatureSwitch_;
  }
  /**
   * <pre>
   * 红外温度报警开关
   * </pre>
   *
   * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
   */
  public com.intellif.ifai.common.CommonBoolOrBuilder getInfraredTemperatureSwitchOrBuilder() {
    return getInfraredTemperatureSwitch();
  }

  public static final int INFRARED_TEMPERATURE_MINIMUM_FIELD_NUMBER = 2;
  private com.intellif.ifai.common.CommonFloat infraredTemperatureMinimum_;
  /**
   * <pre>
   * 红外温度报警阈值最小值
   * </pre>
   *
   * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
   */
  public boolean hasInfraredTemperatureMinimum() {
    return infraredTemperatureMinimum_ != null;
  }
  /**
   * <pre>
   * 红外温度报警阈值最小值
   * </pre>
   *
   * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
   */
  public com.intellif.ifai.common.CommonFloat getInfraredTemperatureMinimum() {
    return infraredTemperatureMinimum_ == null ? com.intellif.ifai.common.CommonFloat.getDefaultInstance() : infraredTemperatureMinimum_;
  }
  /**
   * <pre>
   * 红外温度报警阈值最小值
   * </pre>
   *
   * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
   */
  public com.intellif.ifai.common.CommonFloatOrBuilder getInfraredTemperatureMinimumOrBuilder() {
    return getInfraredTemperatureMinimum();
  }

  public static final int INFRARED_TEMPERATURE_MAXIMUM_FIELD_NUMBER = 3;
  private com.intellif.ifai.common.CommonFloat infraredTemperatureMaximum_;
  /**
   * <pre>
   * 红外温度报警阈值最大值
   * </pre>
   *
   * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
   */
  public boolean hasInfraredTemperatureMaximum() {
    return infraredTemperatureMaximum_ != null;
  }
  /**
   * <pre>
   * 红外温度报警阈值最大值
   * </pre>
   *
   * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
   */
  public com.intellif.ifai.common.CommonFloat getInfraredTemperatureMaximum() {
    return infraredTemperatureMaximum_ == null ? com.intellif.ifai.common.CommonFloat.getDefaultInstance() : infraredTemperatureMaximum_;
  }
  /**
   * <pre>
   * 红外温度报警阈值最大值
   * </pre>
   *
   * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
   */
  public com.intellif.ifai.common.CommonFloatOrBuilder getInfraredTemperatureMaximumOrBuilder() {
    return getInfraredTemperatureMaximum();
  }

  public static final int INFRARED_TEMPERATURE_ADJUST_FIELD_NUMBER = 4;
  private com.intellif.ifai.common.CommonFloat infraredTemperatureAdjust_;
  /**
   * <pre>
   * 红外温度修正参数
   * </pre>
   *
   * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
   */
  public boolean hasInfraredTemperatureAdjust() {
    return infraredTemperatureAdjust_ != null;
  }
  /**
   * <pre>
   * 红外温度修正参数
   * </pre>
   *
   * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
   */
  public com.intellif.ifai.common.CommonFloat getInfraredTemperatureAdjust() {
    return infraredTemperatureAdjust_ == null ? com.intellif.ifai.common.CommonFloat.getDefaultInstance() : infraredTemperatureAdjust_;
  }
  /**
   * <pre>
   * 红外温度修正参数
   * </pre>
   *
   * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
   */
  public com.intellif.ifai.common.CommonFloatOrBuilder getInfraredTemperatureAdjustOrBuilder() {
    return getInfraredTemperatureAdjust();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (infraredTemperatureSwitch_ != null) {
      output.writeMessage(1, getInfraredTemperatureSwitch());
    }
    if (infraredTemperatureMinimum_ != null) {
      output.writeMessage(2, getInfraredTemperatureMinimum());
    }
    if (infraredTemperatureMaximum_ != null) {
      output.writeMessage(3, getInfraredTemperatureMaximum());
    }
    if (infraredTemperatureAdjust_ != null) {
      output.writeMessage(4, getInfraredTemperatureAdjust());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (infraredTemperatureSwitch_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInfraredTemperatureSwitch());
    }
    if (infraredTemperatureMinimum_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getInfraredTemperatureMinimum());
    }
    if (infraredTemperatureMaximum_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getInfraredTemperatureMaximum());
    }
    if (infraredTemperatureAdjust_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getInfraredTemperatureAdjust());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.intellif.ifai.config.DoorInfraredFeatureConfiguration)) {
      return super.equals(obj);
    }
    com.intellif.ifai.config.DoorInfraredFeatureConfiguration other = (com.intellif.ifai.config.DoorInfraredFeatureConfiguration) obj;

    boolean result = true;
    result = result && (hasInfraredTemperatureSwitch() == other.hasInfraredTemperatureSwitch());
    if (hasInfraredTemperatureSwitch()) {
      result = result && getInfraredTemperatureSwitch()
          .equals(other.getInfraredTemperatureSwitch());
    }
    result = result && (hasInfraredTemperatureMinimum() == other.hasInfraredTemperatureMinimum());
    if (hasInfraredTemperatureMinimum()) {
      result = result && getInfraredTemperatureMinimum()
          .equals(other.getInfraredTemperatureMinimum());
    }
    result = result && (hasInfraredTemperatureMaximum() == other.hasInfraredTemperatureMaximum());
    if (hasInfraredTemperatureMaximum()) {
      result = result && getInfraredTemperatureMaximum()
          .equals(other.getInfraredTemperatureMaximum());
    }
    result = result && (hasInfraredTemperatureAdjust() == other.hasInfraredTemperatureAdjust());
    if (hasInfraredTemperatureAdjust()) {
      result = result && getInfraredTemperatureAdjust()
          .equals(other.getInfraredTemperatureAdjust());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInfraredTemperatureSwitch()) {
      hash = (37 * hash) + INFRARED_TEMPERATURE_SWITCH_FIELD_NUMBER;
      hash = (53 * hash) + getInfraredTemperatureSwitch().hashCode();
    }
    if (hasInfraredTemperatureMinimum()) {
      hash = (37 * hash) + INFRARED_TEMPERATURE_MINIMUM_FIELD_NUMBER;
      hash = (53 * hash) + getInfraredTemperatureMinimum().hashCode();
    }
    if (hasInfraredTemperatureMaximum()) {
      hash = (37 * hash) + INFRARED_TEMPERATURE_MAXIMUM_FIELD_NUMBER;
      hash = (53 * hash) + getInfraredTemperatureMaximum().hashCode();
    }
    if (hasInfraredTemperatureAdjust()) {
      hash = (37 * hash) + INFRARED_TEMPERATURE_ADJUST_FIELD_NUMBER;
      hash = (53 * hash) + getInfraredTemperatureAdjust().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.intellif.ifai.config.DoorInfraredFeatureConfiguration prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * </pre>
   *
   * Protobuf type {@code Ifaipb.DoorInfraredFeatureConfiguration}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:Ifaipb.DoorInfraredFeatureConfiguration)
      com.intellif.ifai.config.DoorInfraredFeatureConfigurationOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.intellif.ifai.config.Ifai.internal_static_Ifaipb_DoorInfraredFeatureConfiguration_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.intellif.ifai.config.Ifai.internal_static_Ifaipb_DoorInfraredFeatureConfiguration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.intellif.ifai.config.DoorInfraredFeatureConfiguration.class, com.intellif.ifai.config.DoorInfraredFeatureConfiguration.Builder.class);
    }

    // Construct using com.intellif.ifai.config.DoorInfraredFeatureConfiguration.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (infraredTemperatureSwitchBuilder_ == null) {
        infraredTemperatureSwitch_ = null;
      } else {
        infraredTemperatureSwitch_ = null;
        infraredTemperatureSwitchBuilder_ = null;
      }
      if (infraredTemperatureMinimumBuilder_ == null) {
        infraredTemperatureMinimum_ = null;
      } else {
        infraredTemperatureMinimum_ = null;
        infraredTemperatureMinimumBuilder_ = null;
      }
      if (infraredTemperatureMaximumBuilder_ == null) {
        infraredTemperatureMaximum_ = null;
      } else {
        infraredTemperatureMaximum_ = null;
        infraredTemperatureMaximumBuilder_ = null;
      }
      if (infraredTemperatureAdjustBuilder_ == null) {
        infraredTemperatureAdjust_ = null;
      } else {
        infraredTemperatureAdjust_ = null;
        infraredTemperatureAdjustBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.intellif.ifai.config.Ifai.internal_static_Ifaipb_DoorInfraredFeatureConfiguration_descriptor;
    }

    @java.lang.Override
    public com.intellif.ifai.config.DoorInfraredFeatureConfiguration getDefaultInstanceForType() {
      return com.intellif.ifai.config.DoorInfraredFeatureConfiguration.getDefaultInstance();
    }

    @java.lang.Override
    public com.intellif.ifai.config.DoorInfraredFeatureConfiguration build() {
      com.intellif.ifai.config.DoorInfraredFeatureConfiguration result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.intellif.ifai.config.DoorInfraredFeatureConfiguration buildPartial() {
      com.intellif.ifai.config.DoorInfraredFeatureConfiguration result = new com.intellif.ifai.config.DoorInfraredFeatureConfiguration(this);
      if (infraredTemperatureSwitchBuilder_ == null) {
        result.infraredTemperatureSwitch_ = infraredTemperatureSwitch_;
      } else {
        result.infraredTemperatureSwitch_ = infraredTemperatureSwitchBuilder_.build();
      }
      if (infraredTemperatureMinimumBuilder_ == null) {
        result.infraredTemperatureMinimum_ = infraredTemperatureMinimum_;
      } else {
        result.infraredTemperatureMinimum_ = infraredTemperatureMinimumBuilder_.build();
      }
      if (infraredTemperatureMaximumBuilder_ == null) {
        result.infraredTemperatureMaximum_ = infraredTemperatureMaximum_;
      } else {
        result.infraredTemperatureMaximum_ = infraredTemperatureMaximumBuilder_.build();
      }
      if (infraredTemperatureAdjustBuilder_ == null) {
        result.infraredTemperatureAdjust_ = infraredTemperatureAdjust_;
      } else {
        result.infraredTemperatureAdjust_ = infraredTemperatureAdjustBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.intellif.ifai.config.DoorInfraredFeatureConfiguration) {
        return mergeFrom((com.intellif.ifai.config.DoorInfraredFeatureConfiguration)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.intellif.ifai.config.DoorInfraredFeatureConfiguration other) {
      if (other == com.intellif.ifai.config.DoorInfraredFeatureConfiguration.getDefaultInstance()) return this;
      if (other.hasInfraredTemperatureSwitch()) {
        mergeInfraredTemperatureSwitch(other.getInfraredTemperatureSwitch());
      }
      if (other.hasInfraredTemperatureMinimum()) {
        mergeInfraredTemperatureMinimum(other.getInfraredTemperatureMinimum());
      }
      if (other.hasInfraredTemperatureMaximum()) {
        mergeInfraredTemperatureMaximum(other.getInfraredTemperatureMaximum());
      }
      if (other.hasInfraredTemperatureAdjust()) {
        mergeInfraredTemperatureAdjust(other.getInfraredTemperatureAdjust());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.intellif.ifai.config.DoorInfraredFeatureConfiguration parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.intellif.ifai.config.DoorInfraredFeatureConfiguration) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.intellif.ifai.common.CommonBool infraredTemperatureSwitch_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellif.ifai.common.CommonBool, com.intellif.ifai.common.CommonBool.Builder, com.intellif.ifai.common.CommonBoolOrBuilder> infraredTemperatureSwitchBuilder_;
    /**
     * <pre>
     * 红外温度报警开关
     * </pre>
     *
     * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
     */
    public boolean hasInfraredTemperatureSwitch() {
      return infraredTemperatureSwitchBuilder_ != null || infraredTemperatureSwitch_ != null;
    }
    /**
     * <pre>
     * 红外温度报警开关
     * </pre>
     *
     * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
     */
    public com.intellif.ifai.common.CommonBool getInfraredTemperatureSwitch() {
      if (infraredTemperatureSwitchBuilder_ == null) {
        return infraredTemperatureSwitch_ == null ? com.intellif.ifai.common.CommonBool.getDefaultInstance() : infraredTemperatureSwitch_;
      } else {
        return infraredTemperatureSwitchBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * 红外温度报警开关
     * </pre>
     *
     * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
     */
    public Builder setInfraredTemperatureSwitch(com.intellif.ifai.common.CommonBool value) {
      if (infraredTemperatureSwitchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        infraredTemperatureSwitch_ = value;
        onChanged();
      } else {
        infraredTemperatureSwitchBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警开关
     * </pre>
     *
     * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
     */
    public Builder setInfraredTemperatureSwitch(
        com.intellif.ifai.common.CommonBool.Builder builderForValue) {
      if (infraredTemperatureSwitchBuilder_ == null) {
        infraredTemperatureSwitch_ = builderForValue.build();
        onChanged();
      } else {
        infraredTemperatureSwitchBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警开关
     * </pre>
     *
     * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
     */
    public Builder mergeInfraredTemperatureSwitch(com.intellif.ifai.common.CommonBool value) {
      if (infraredTemperatureSwitchBuilder_ == null) {
        if (infraredTemperatureSwitch_ != null) {
          infraredTemperatureSwitch_ =
            com.intellif.ifai.common.CommonBool.newBuilder(infraredTemperatureSwitch_).mergeFrom(value).buildPartial();
        } else {
          infraredTemperatureSwitch_ = value;
        }
        onChanged();
      } else {
        infraredTemperatureSwitchBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警开关
     * </pre>
     *
     * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
     */
    public Builder clearInfraredTemperatureSwitch() {
      if (infraredTemperatureSwitchBuilder_ == null) {
        infraredTemperatureSwitch_ = null;
        onChanged();
      } else {
        infraredTemperatureSwitch_ = null;
        infraredTemperatureSwitchBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警开关
     * </pre>
     *
     * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
     */
    public com.intellif.ifai.common.CommonBool.Builder getInfraredTemperatureSwitchBuilder() {
      
      onChanged();
      return getInfraredTemperatureSwitchFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * 红外温度报警开关
     * </pre>
     *
     * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
     */
    public com.intellif.ifai.common.CommonBoolOrBuilder getInfraredTemperatureSwitchOrBuilder() {
      if (infraredTemperatureSwitchBuilder_ != null) {
        return infraredTemperatureSwitchBuilder_.getMessageOrBuilder();
      } else {
        return infraredTemperatureSwitch_ == null ?
            com.intellif.ifai.common.CommonBool.getDefaultInstance() : infraredTemperatureSwitch_;
      }
    }
    /**
     * <pre>
     * 红外温度报警开关
     * </pre>
     *
     * <code>.Ifaipb.CommonBool infrared_temperature_switch = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellif.ifai.common.CommonBool, com.intellif.ifai.common.CommonBool.Builder, com.intellif.ifai.common.CommonBoolOrBuilder> 
        getInfraredTemperatureSwitchFieldBuilder() {
      if (infraredTemperatureSwitchBuilder_ == null) {
        infraredTemperatureSwitchBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.intellif.ifai.common.CommonBool, com.intellif.ifai.common.CommonBool.Builder, com.intellif.ifai.common.CommonBoolOrBuilder>(
                getInfraredTemperatureSwitch(),
                getParentForChildren(),
                isClean());
        infraredTemperatureSwitch_ = null;
      }
      return infraredTemperatureSwitchBuilder_;
    }

    private com.intellif.ifai.common.CommonFloat infraredTemperatureMinimum_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellif.ifai.common.CommonFloat, com.intellif.ifai.common.CommonFloat.Builder, com.intellif.ifai.common.CommonFloatOrBuilder> infraredTemperatureMinimumBuilder_;
    /**
     * <pre>
     * 红外温度报警阈值最小值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
     */
    public boolean hasInfraredTemperatureMinimum() {
      return infraredTemperatureMinimumBuilder_ != null || infraredTemperatureMinimum_ != null;
    }
    /**
     * <pre>
     * 红外温度报警阈值最小值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
     */
    public com.intellif.ifai.common.CommonFloat getInfraredTemperatureMinimum() {
      if (infraredTemperatureMinimumBuilder_ == null) {
        return infraredTemperatureMinimum_ == null ? com.intellif.ifai.common.CommonFloat.getDefaultInstance() : infraredTemperatureMinimum_;
      } else {
        return infraredTemperatureMinimumBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * 红外温度报警阈值最小值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
     */
    public Builder setInfraredTemperatureMinimum(com.intellif.ifai.common.CommonFloat value) {
      if (infraredTemperatureMinimumBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        infraredTemperatureMinimum_ = value;
        onChanged();
      } else {
        infraredTemperatureMinimumBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警阈值最小值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
     */
    public Builder setInfraredTemperatureMinimum(
        com.intellif.ifai.common.CommonFloat.Builder builderForValue) {
      if (infraredTemperatureMinimumBuilder_ == null) {
        infraredTemperatureMinimum_ = builderForValue.build();
        onChanged();
      } else {
        infraredTemperatureMinimumBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警阈值最小值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
     */
    public Builder mergeInfraredTemperatureMinimum(com.intellif.ifai.common.CommonFloat value) {
      if (infraredTemperatureMinimumBuilder_ == null) {
        if (infraredTemperatureMinimum_ != null) {
          infraredTemperatureMinimum_ =
            com.intellif.ifai.common.CommonFloat.newBuilder(infraredTemperatureMinimum_).mergeFrom(value).buildPartial();
        } else {
          infraredTemperatureMinimum_ = value;
        }
        onChanged();
      } else {
        infraredTemperatureMinimumBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警阈值最小值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
     */
    public Builder clearInfraredTemperatureMinimum() {
      if (infraredTemperatureMinimumBuilder_ == null) {
        infraredTemperatureMinimum_ = null;
        onChanged();
      } else {
        infraredTemperatureMinimum_ = null;
        infraredTemperatureMinimumBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警阈值最小值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
     */
    public com.intellif.ifai.common.CommonFloat.Builder getInfraredTemperatureMinimumBuilder() {
      
      onChanged();
      return getInfraredTemperatureMinimumFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * 红外温度报警阈值最小值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
     */
    public com.intellif.ifai.common.CommonFloatOrBuilder getInfraredTemperatureMinimumOrBuilder() {
      if (infraredTemperatureMinimumBuilder_ != null) {
        return infraredTemperatureMinimumBuilder_.getMessageOrBuilder();
      } else {
        return infraredTemperatureMinimum_ == null ?
            com.intellif.ifai.common.CommonFloat.getDefaultInstance() : infraredTemperatureMinimum_;
      }
    }
    /**
     * <pre>
     * 红外温度报警阈值最小值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_minimum = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellif.ifai.common.CommonFloat, com.intellif.ifai.common.CommonFloat.Builder, com.intellif.ifai.common.CommonFloatOrBuilder> 
        getInfraredTemperatureMinimumFieldBuilder() {
      if (infraredTemperatureMinimumBuilder_ == null) {
        infraredTemperatureMinimumBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.intellif.ifai.common.CommonFloat, com.intellif.ifai.common.CommonFloat.Builder, com.intellif.ifai.common.CommonFloatOrBuilder>(
                getInfraredTemperatureMinimum(),
                getParentForChildren(),
                isClean());
        infraredTemperatureMinimum_ = null;
      }
      return infraredTemperatureMinimumBuilder_;
    }

    private com.intellif.ifai.common.CommonFloat infraredTemperatureMaximum_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellif.ifai.common.CommonFloat, com.intellif.ifai.common.CommonFloat.Builder, com.intellif.ifai.common.CommonFloatOrBuilder> infraredTemperatureMaximumBuilder_;
    /**
     * <pre>
     * 红外温度报警阈值最大值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
     */
    public boolean hasInfraredTemperatureMaximum() {
      return infraredTemperatureMaximumBuilder_ != null || infraredTemperatureMaximum_ != null;
    }
    /**
     * <pre>
     * 红外温度报警阈值最大值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
     */
    public com.intellif.ifai.common.CommonFloat getInfraredTemperatureMaximum() {
      if (infraredTemperatureMaximumBuilder_ == null) {
        return infraredTemperatureMaximum_ == null ? com.intellif.ifai.common.CommonFloat.getDefaultInstance() : infraredTemperatureMaximum_;
      } else {
        return infraredTemperatureMaximumBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * 红外温度报警阈值最大值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
     */
    public Builder setInfraredTemperatureMaximum(com.intellif.ifai.common.CommonFloat value) {
      if (infraredTemperatureMaximumBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        infraredTemperatureMaximum_ = value;
        onChanged();
      } else {
        infraredTemperatureMaximumBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警阈值最大值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
     */
    public Builder setInfraredTemperatureMaximum(
        com.intellif.ifai.common.CommonFloat.Builder builderForValue) {
      if (infraredTemperatureMaximumBuilder_ == null) {
        infraredTemperatureMaximum_ = builderForValue.build();
        onChanged();
      } else {
        infraredTemperatureMaximumBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警阈值最大值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
     */
    public Builder mergeInfraredTemperatureMaximum(com.intellif.ifai.common.CommonFloat value) {
      if (infraredTemperatureMaximumBuilder_ == null) {
        if (infraredTemperatureMaximum_ != null) {
          infraredTemperatureMaximum_ =
            com.intellif.ifai.common.CommonFloat.newBuilder(infraredTemperatureMaximum_).mergeFrom(value).buildPartial();
        } else {
          infraredTemperatureMaximum_ = value;
        }
        onChanged();
      } else {
        infraredTemperatureMaximumBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警阈值最大值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
     */
    public Builder clearInfraredTemperatureMaximum() {
      if (infraredTemperatureMaximumBuilder_ == null) {
        infraredTemperatureMaximum_ = null;
        onChanged();
      } else {
        infraredTemperatureMaximum_ = null;
        infraredTemperatureMaximumBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度报警阈值最大值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
     */
    public com.intellif.ifai.common.CommonFloat.Builder getInfraredTemperatureMaximumBuilder() {
      
      onChanged();
      return getInfraredTemperatureMaximumFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * 红外温度报警阈值最大值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
     */
    public com.intellif.ifai.common.CommonFloatOrBuilder getInfraredTemperatureMaximumOrBuilder() {
      if (infraredTemperatureMaximumBuilder_ != null) {
        return infraredTemperatureMaximumBuilder_.getMessageOrBuilder();
      } else {
        return infraredTemperatureMaximum_ == null ?
            com.intellif.ifai.common.CommonFloat.getDefaultInstance() : infraredTemperatureMaximum_;
      }
    }
    /**
     * <pre>
     * 红外温度报警阈值最大值
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_maximum = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellif.ifai.common.CommonFloat, com.intellif.ifai.common.CommonFloat.Builder, com.intellif.ifai.common.CommonFloatOrBuilder> 
        getInfraredTemperatureMaximumFieldBuilder() {
      if (infraredTemperatureMaximumBuilder_ == null) {
        infraredTemperatureMaximumBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.intellif.ifai.common.CommonFloat, com.intellif.ifai.common.CommonFloat.Builder, com.intellif.ifai.common.CommonFloatOrBuilder>(
                getInfraredTemperatureMaximum(),
                getParentForChildren(),
                isClean());
        infraredTemperatureMaximum_ = null;
      }
      return infraredTemperatureMaximumBuilder_;
    }

    private com.intellif.ifai.common.CommonFloat infraredTemperatureAdjust_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellif.ifai.common.CommonFloat, com.intellif.ifai.common.CommonFloat.Builder, com.intellif.ifai.common.CommonFloatOrBuilder> infraredTemperatureAdjustBuilder_;
    /**
     * <pre>
     * 红外温度修正参数
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
     */
    public boolean hasInfraredTemperatureAdjust() {
      return infraredTemperatureAdjustBuilder_ != null || infraredTemperatureAdjust_ != null;
    }
    /**
     * <pre>
     * 红外温度修正参数
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
     */
    public com.intellif.ifai.common.CommonFloat getInfraredTemperatureAdjust() {
      if (infraredTemperatureAdjustBuilder_ == null) {
        return infraredTemperatureAdjust_ == null ? com.intellif.ifai.common.CommonFloat.getDefaultInstance() : infraredTemperatureAdjust_;
      } else {
        return infraredTemperatureAdjustBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * 红外温度修正参数
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
     */
    public Builder setInfraredTemperatureAdjust(com.intellif.ifai.common.CommonFloat value) {
      if (infraredTemperatureAdjustBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        infraredTemperatureAdjust_ = value;
        onChanged();
      } else {
        infraredTemperatureAdjustBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度修正参数
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
     */
    public Builder setInfraredTemperatureAdjust(
        com.intellif.ifai.common.CommonFloat.Builder builderForValue) {
      if (infraredTemperatureAdjustBuilder_ == null) {
        infraredTemperatureAdjust_ = builderForValue.build();
        onChanged();
      } else {
        infraredTemperatureAdjustBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度修正参数
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
     */
    public Builder mergeInfraredTemperatureAdjust(com.intellif.ifai.common.CommonFloat value) {
      if (infraredTemperatureAdjustBuilder_ == null) {
        if (infraredTemperatureAdjust_ != null) {
          infraredTemperatureAdjust_ =
            com.intellif.ifai.common.CommonFloat.newBuilder(infraredTemperatureAdjust_).mergeFrom(value).buildPartial();
        } else {
          infraredTemperatureAdjust_ = value;
        }
        onChanged();
      } else {
        infraredTemperatureAdjustBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度修正参数
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
     */
    public Builder clearInfraredTemperatureAdjust() {
      if (infraredTemperatureAdjustBuilder_ == null) {
        infraredTemperatureAdjust_ = null;
        onChanged();
      } else {
        infraredTemperatureAdjust_ = null;
        infraredTemperatureAdjustBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * 红外温度修正参数
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
     */
    public com.intellif.ifai.common.CommonFloat.Builder getInfraredTemperatureAdjustBuilder() {
      
      onChanged();
      return getInfraredTemperatureAdjustFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * 红外温度修正参数
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
     */
    public com.intellif.ifai.common.CommonFloatOrBuilder getInfraredTemperatureAdjustOrBuilder() {
      if (infraredTemperatureAdjustBuilder_ != null) {
        return infraredTemperatureAdjustBuilder_.getMessageOrBuilder();
      } else {
        return infraredTemperatureAdjust_ == null ?
            com.intellif.ifai.common.CommonFloat.getDefaultInstance() : infraredTemperatureAdjust_;
      }
    }
    /**
     * <pre>
     * 红外温度修正参数
     * </pre>
     *
     * <code>.Ifaipb.CommonFloat infrared_temperature_adjust = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellif.ifai.common.CommonFloat, com.intellif.ifai.common.CommonFloat.Builder, com.intellif.ifai.common.CommonFloatOrBuilder> 
        getInfraredTemperatureAdjustFieldBuilder() {
      if (infraredTemperatureAdjustBuilder_ == null) {
        infraredTemperatureAdjustBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.intellif.ifai.common.CommonFloat, com.intellif.ifai.common.CommonFloat.Builder, com.intellif.ifai.common.CommonFloatOrBuilder>(
                getInfraredTemperatureAdjust(),
                getParentForChildren(),
                isClean());
        infraredTemperatureAdjust_ = null;
      }
      return infraredTemperatureAdjustBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:Ifaipb.DoorInfraredFeatureConfiguration)
  }

  // @@protoc_insertion_point(class_scope:Ifaipb.DoorInfraredFeatureConfiguration)
  private static final com.intellif.ifai.config.DoorInfraredFeatureConfiguration DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.intellif.ifai.config.DoorInfraredFeatureConfiguration();
  }

  public static com.intellif.ifai.config.DoorInfraredFeatureConfiguration getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DoorInfraredFeatureConfiguration>
      PARSER = new com.google.protobuf.AbstractParser<DoorInfraredFeatureConfiguration>() {
    @java.lang.Override
    public DoorInfraredFeatureConfiguration parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new DoorInfraredFeatureConfiguration(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<DoorInfraredFeatureConfiguration> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DoorInfraredFeatureConfiguration> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.intellif.ifai.config.DoorInfraredFeatureConfiguration getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

